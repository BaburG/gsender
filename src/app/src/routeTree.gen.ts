/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ToolsLazyImport = createFileRoute('/tools')()
const SurfacingLazyImport = createFileRoute('/surfacing')()
const StatsLazyImport = createFileRoute('/stats')()
const SquaringLazyImport = createFileRoute('/squaring')()
const MovementTuningLazyImport = createFileRoute('/movement-tuning')()
const FirmwareLazyImport = createFileRoute('/firmware')()
const ConfigurationLazyImport = createFileRoute('/configuration')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ToolsLazyRoute = ToolsLazyImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tools.lazy').then((d) => d.Route))

const SurfacingLazyRoute = SurfacingLazyImport.update({
  id: '/surfacing',
  path: '/surfacing',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/surfacing.lazy').then((d) => d.Route))

const StatsLazyRoute = StatsLazyImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/stats.lazy').then((d) => d.Route))

const SquaringLazyRoute = SquaringLazyImport.update({
  id: '/squaring',
  path: '/squaring',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/squaring.lazy').then((d) => d.Route))

const MovementTuningLazyRoute = MovementTuningLazyImport.update({
  id: '/movement-tuning',
  path: '/movement-tuning',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/movement-tuning.lazy').then((d) => d.Route),
)

const FirmwareLazyRoute = FirmwareLazyImport.update({
  id: '/firmware',
  path: '/firmware',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/firmware.lazy').then((d) => d.Route))

const ConfigurationLazyRoute = ConfigurationLazyImport.update({
  id: '/configuration',
  path: '/configuration',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/configuration.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/configuration': {
      id: '/configuration'
      path: '/configuration'
      fullPath: '/configuration'
      preLoaderRoute: typeof ConfigurationLazyImport
      parentRoute: typeof rootRoute
    }
    '/firmware': {
      id: '/firmware'
      path: '/firmware'
      fullPath: '/firmware'
      preLoaderRoute: typeof FirmwareLazyImport
      parentRoute: typeof rootRoute
    }
    '/movement-tuning': {
      id: '/movement-tuning'
      path: '/movement-tuning'
      fullPath: '/movement-tuning'
      preLoaderRoute: typeof MovementTuningLazyImport
      parentRoute: typeof rootRoute
    }
    '/squaring': {
      id: '/squaring'
      path: '/squaring'
      fullPath: '/squaring'
      preLoaderRoute: typeof SquaringLazyImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsLazyImport
      parentRoute: typeof rootRoute
    }
    '/surfacing': {
      id: '/surfacing'
      path: '/surfacing'
      fullPath: '/surfacing'
      preLoaderRoute: typeof SurfacingLazyImport
      parentRoute: typeof rootRoute
    }
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/configuration': typeof ConfigurationLazyRoute
  '/firmware': typeof FirmwareLazyRoute
  '/movement-tuning': typeof MovementTuningLazyRoute
  '/squaring': typeof SquaringLazyRoute
  '/stats': typeof StatsLazyRoute
  '/surfacing': typeof SurfacingLazyRoute
  '/tools': typeof ToolsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/configuration': typeof ConfigurationLazyRoute
  '/firmware': typeof FirmwareLazyRoute
  '/movement-tuning': typeof MovementTuningLazyRoute
  '/squaring': typeof SquaringLazyRoute
  '/stats': typeof StatsLazyRoute
  '/surfacing': typeof SurfacingLazyRoute
  '/tools': typeof ToolsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/configuration': typeof ConfigurationLazyRoute
  '/firmware': typeof FirmwareLazyRoute
  '/movement-tuning': typeof MovementTuningLazyRoute
  '/squaring': typeof SquaringLazyRoute
  '/stats': typeof StatsLazyRoute
  '/surfacing': typeof SurfacingLazyRoute
  '/tools': typeof ToolsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/configuration'
    | '/firmware'
    | '/movement-tuning'
    | '/squaring'
    | '/stats'
    | '/surfacing'
    | '/tools'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/configuration'
    | '/firmware'
    | '/movement-tuning'
    | '/squaring'
    | '/stats'
    | '/surfacing'
    | '/tools'
  id:
    | '__root__'
    | '/'
    | '/configuration'
    | '/firmware'
    | '/movement-tuning'
    | '/squaring'
    | '/stats'
    | '/surfacing'
    | '/tools'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ConfigurationLazyRoute: typeof ConfigurationLazyRoute
  FirmwareLazyRoute: typeof FirmwareLazyRoute
  MovementTuningLazyRoute: typeof MovementTuningLazyRoute
  SquaringLazyRoute: typeof SquaringLazyRoute
  StatsLazyRoute: typeof StatsLazyRoute
  SurfacingLazyRoute: typeof SurfacingLazyRoute
  ToolsLazyRoute: typeof ToolsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ConfigurationLazyRoute: ConfigurationLazyRoute,
  FirmwareLazyRoute: FirmwareLazyRoute,
  MovementTuningLazyRoute: MovementTuningLazyRoute,
  SquaringLazyRoute: SquaringLazyRoute,
  StatsLazyRoute: StatsLazyRoute,
  SurfacingLazyRoute: SurfacingLazyRoute,
  ToolsLazyRoute: ToolsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/configuration",
        "/firmware",
        "/movement-tuning",
        "/squaring",
        "/stats",
        "/surfacing",
        "/tools"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/configuration": {
      "filePath": "configuration.lazy.tsx"
    },
    "/firmware": {
      "filePath": "firmware.lazy.tsx"
    },
    "/movement-tuning": {
      "filePath": "movement-tuning.lazy.tsx"
    },
    "/squaring": {
      "filePath": "squaring.lazy.tsx"
    },
    "/stats": {
      "filePath": "stats.lazy.tsx"
    },
    "/surfacing": {
      "filePath": "surfacing.lazy.tsx"
    },
    "/tools": {
      "filePath": "tools.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
