/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ToolsLazyImport = createFileRoute('/tools')()
const StatsLazyImport = createFileRoute('/stats')()
const ConfigurationLazyImport = createFileRoute('/configuration')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ToolsLazyRoute = ToolsLazyImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tools.lazy').then((d) => d.Route))

const StatsLazyRoute = StatsLazyImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/stats.lazy').then((d) => d.Route))

const ConfigurationLazyRoute = ConfigurationLazyImport.update({
  id: '/configuration',
  path: '/configuration',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/configuration.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/configuration': {
      id: '/configuration'
      path: '/configuration'
      fullPath: '/configuration'
      preLoaderRoute: typeof ConfigurationLazyImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsLazyImport
      parentRoute: typeof rootRoute
    }
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/configuration': typeof ConfigurationLazyRoute
  '/stats': typeof StatsLazyRoute
  '/tools': typeof ToolsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/configuration': typeof ConfigurationLazyRoute
  '/stats': typeof StatsLazyRoute
  '/tools': typeof ToolsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/configuration': typeof ConfigurationLazyRoute
  '/stats': typeof StatsLazyRoute
  '/tools': typeof ToolsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/configuration' | '/stats' | '/tools'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/configuration' | '/stats' | '/tools'
  id: '__root__' | '/' | '/configuration' | '/stats' | '/tools'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ConfigurationLazyRoute: typeof ConfigurationLazyRoute
  StatsLazyRoute: typeof StatsLazyRoute
  ToolsLazyRoute: typeof ToolsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ConfigurationLazyRoute: ConfigurationLazyRoute,
  StatsLazyRoute: StatsLazyRoute,
  ToolsLazyRoute: ToolsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/configuration",
        "/stats",
        "/tools"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/configuration": {
      "filePath": "configuration.lazy.tsx"
    },
    "/stats": {
      "filePath": "stats.lazy.tsx"
    },
    "/tools": {
      "filePath": "tools.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
